// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BitcoinAcct.proto

#ifndef PROTOBUF_BitcoinAcct_2eproto__INCLUDED
#define PROTOBUF_BitcoinAcct_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace OTDB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BitcoinAcct_2eproto();
void protobuf_AssignDesc_BitcoinAcct_2eproto();
void protobuf_ShutdownFile_BitcoinAcct_2eproto();

class BitcoinAcct_InternalPB;
class Wallet_InternalPB;

// ===================================================================

class BitcoinAcct_InternalPB : public ::google::protobuf::Message {
 public:
  BitcoinAcct_InternalPB();
  virtual ~BitcoinAcct_InternalPB();
  
  BitcoinAcct_InternalPB(const BitcoinAcct_InternalPB& from);
  
  inline BitcoinAcct_InternalPB& operator=(const BitcoinAcct_InternalPB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BitcoinAcct_InternalPB& default_instance();
  
  void Swap(BitcoinAcct_InternalPB* other);
  
  // implements Message ----------------------------------------------
  
  BitcoinAcct_InternalPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BitcoinAcct_InternalPB& from);
  void MergeFrom(const BitcoinAcct_InternalPB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string bitcoin_id = 1;
  inline bool has_bitcoin_id() const;
  inline void clear_bitcoin_id();
  static const int kBitcoinIdFieldNumber = 1;
  inline const ::std::string& bitcoin_id() const;
  inline void set_bitcoin_id(const ::std::string& value);
  inline void set_bitcoin_id(const char* value);
  inline void set_bitcoin_id(const char* value, size_t size);
  inline ::std::string* mutable_bitcoin_id();
  inline ::std::string* release_bitcoin_id();
  
  // optional string bitcoin_name = 2;
  inline bool has_bitcoin_name() const;
  inline void clear_bitcoin_name();
  static const int kBitcoinNameFieldNumber = 2;
  inline const ::std::string& bitcoin_name() const;
  inline void set_bitcoin_name(const ::std::string& value);
  inline void set_bitcoin_name(const char* value);
  inline void set_bitcoin_name(const char* value, size_t size);
  inline ::std::string* mutable_bitcoin_name();
  inline ::std::string* release_bitcoin_name();
  
  // optional string gui_label = 3;
  inline bool has_gui_label() const;
  inline void clear_gui_label();
  static const int kGuiLabelFieldNumber = 3;
  inline const ::std::string& gui_label() const;
  inline void set_gui_label(const ::std::string& value);
  inline void set_gui_label(const char* value);
  inline void set_gui_label(const char* value, size_t size);
  inline ::std::string* mutable_gui_label();
  inline ::std::string* release_gui_label();
  
  // @@protoc_insertion_point(class_scope:OTDB.BitcoinAcct_InternalPB)
 private:
  inline void set_has_bitcoin_id();
  inline void clear_has_bitcoin_id();
  inline void set_has_bitcoin_name();
  inline void clear_has_bitcoin_name();
  inline void set_has_gui_label();
  inline void clear_has_gui_label();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* bitcoin_id_;
  ::std::string* bitcoin_name_;
  ::std::string* gui_label_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_BitcoinAcct_2eproto();
  friend void protobuf_AssignDesc_BitcoinAcct_2eproto();
  friend void protobuf_ShutdownFile_BitcoinAcct_2eproto();
  
  void InitAsDefaultInstance();
  static BitcoinAcct_InternalPB* default_instance_;
};
// -------------------------------------------------------------------

class Wallet_InternalPB : public ::google::protobuf::Message {
 public:
  Wallet_InternalPB();
  virtual ~Wallet_InternalPB();
  
  Wallet_InternalPB(const Wallet_InternalPB& from);
  
  inline Wallet_InternalPB& operator=(const Wallet_InternalPB& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Wallet_InternalPB& default_instance();
  
  void Swap(Wallet_InternalPB* other);
  
  // implements Message ----------------------------------------------
  
  Wallet_InternalPB* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Wallet_InternalPB& from);
  void MergeFrom(const Wallet_InternalPB& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .OTDB.BitcoinAcct_InternalPB bitcoin_acct = 1;
  inline int bitcoin_acct_size() const;
  inline void clear_bitcoin_acct();
  static const int kBitcoinAcctFieldNumber = 1;
  inline const ::OTDB::BitcoinAcct_InternalPB& bitcoin_acct(int index) const;
  inline ::OTDB::BitcoinAcct_InternalPB* mutable_bitcoin_acct(int index);
  inline ::OTDB::BitcoinAcct_InternalPB* add_bitcoin_acct();
  inline const ::google::protobuf::RepeatedPtrField< ::OTDB::BitcoinAcct_InternalPB >&
      bitcoin_acct() const;
  inline ::google::protobuf::RepeatedPtrField< ::OTDB::BitcoinAcct_InternalPB >*
      mutable_bitcoin_acct();
  
  // @@protoc_insertion_point(class_scope:OTDB.Wallet_InternalPB)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::OTDB::BitcoinAcct_InternalPB > bitcoin_acct_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_BitcoinAcct_2eproto();
  friend void protobuf_AssignDesc_BitcoinAcct_2eproto();
  friend void protobuf_ShutdownFile_BitcoinAcct_2eproto();
  
  void InitAsDefaultInstance();
  static Wallet_InternalPB* default_instance_;
};
// ===================================================================


// ===================================================================

// BitcoinAcct_InternalPB

// optional string bitcoin_id = 1;
inline bool BitcoinAcct_InternalPB::has_bitcoin_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BitcoinAcct_InternalPB::set_has_bitcoin_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BitcoinAcct_InternalPB::clear_has_bitcoin_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BitcoinAcct_InternalPB::clear_bitcoin_id() {
  if (bitcoin_id_ != &::google::protobuf::internal::kEmptyString) {
    bitcoin_id_->clear();
  }
  clear_has_bitcoin_id();
}
inline const ::std::string& BitcoinAcct_InternalPB::bitcoin_id() const {
  return *bitcoin_id_;
}
inline void BitcoinAcct_InternalPB::set_bitcoin_id(const ::std::string& value) {
  set_has_bitcoin_id();
  if (bitcoin_id_ == &::google::protobuf::internal::kEmptyString) {
    bitcoin_id_ = new ::std::string;
  }
  bitcoin_id_->assign(value);
}
inline void BitcoinAcct_InternalPB::set_bitcoin_id(const char* value) {
  set_has_bitcoin_id();
  if (bitcoin_id_ == &::google::protobuf::internal::kEmptyString) {
    bitcoin_id_ = new ::std::string;
  }
  bitcoin_id_->assign(value);
}
inline void BitcoinAcct_InternalPB::set_bitcoin_id(const char* value, size_t size) {
  set_has_bitcoin_id();
  if (bitcoin_id_ == &::google::protobuf::internal::kEmptyString) {
    bitcoin_id_ = new ::std::string;
  }
  bitcoin_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BitcoinAcct_InternalPB::mutable_bitcoin_id() {
  set_has_bitcoin_id();
  if (bitcoin_id_ == &::google::protobuf::internal::kEmptyString) {
    bitcoin_id_ = new ::std::string;
  }
  return bitcoin_id_;
}
inline ::std::string* BitcoinAcct_InternalPB::release_bitcoin_id() {
  clear_has_bitcoin_id();
  if (bitcoin_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bitcoin_id_;
    bitcoin_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string bitcoin_name = 2;
inline bool BitcoinAcct_InternalPB::has_bitcoin_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BitcoinAcct_InternalPB::set_has_bitcoin_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BitcoinAcct_InternalPB::clear_has_bitcoin_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BitcoinAcct_InternalPB::clear_bitcoin_name() {
  if (bitcoin_name_ != &::google::protobuf::internal::kEmptyString) {
    bitcoin_name_->clear();
  }
  clear_has_bitcoin_name();
}
inline const ::std::string& BitcoinAcct_InternalPB::bitcoin_name() const {
  return *bitcoin_name_;
}
inline void BitcoinAcct_InternalPB::set_bitcoin_name(const ::std::string& value) {
  set_has_bitcoin_name();
  if (bitcoin_name_ == &::google::protobuf::internal::kEmptyString) {
    bitcoin_name_ = new ::std::string;
  }
  bitcoin_name_->assign(value);
}
inline void BitcoinAcct_InternalPB::set_bitcoin_name(const char* value) {
  set_has_bitcoin_name();
  if (bitcoin_name_ == &::google::protobuf::internal::kEmptyString) {
    bitcoin_name_ = new ::std::string;
  }
  bitcoin_name_->assign(value);
}
inline void BitcoinAcct_InternalPB::set_bitcoin_name(const char* value, size_t size) {
  set_has_bitcoin_name();
  if (bitcoin_name_ == &::google::protobuf::internal::kEmptyString) {
    bitcoin_name_ = new ::std::string;
  }
  bitcoin_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BitcoinAcct_InternalPB::mutable_bitcoin_name() {
  set_has_bitcoin_name();
  if (bitcoin_name_ == &::google::protobuf::internal::kEmptyString) {
    bitcoin_name_ = new ::std::string;
  }
  return bitcoin_name_;
}
inline ::std::string* BitcoinAcct_InternalPB::release_bitcoin_name() {
  clear_has_bitcoin_name();
  if (bitcoin_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bitcoin_name_;
    bitcoin_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string gui_label = 3;
inline bool BitcoinAcct_InternalPB::has_gui_label() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BitcoinAcct_InternalPB::set_has_gui_label() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BitcoinAcct_InternalPB::clear_has_gui_label() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BitcoinAcct_InternalPB::clear_gui_label() {
  if (gui_label_ != &::google::protobuf::internal::kEmptyString) {
    gui_label_->clear();
  }
  clear_has_gui_label();
}
inline const ::std::string& BitcoinAcct_InternalPB::gui_label() const {
  return *gui_label_;
}
inline void BitcoinAcct_InternalPB::set_gui_label(const ::std::string& value) {
  set_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::kEmptyString) {
    gui_label_ = new ::std::string;
  }
  gui_label_->assign(value);
}
inline void BitcoinAcct_InternalPB::set_gui_label(const char* value) {
  set_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::kEmptyString) {
    gui_label_ = new ::std::string;
  }
  gui_label_->assign(value);
}
inline void BitcoinAcct_InternalPB::set_gui_label(const char* value, size_t size) {
  set_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::kEmptyString) {
    gui_label_ = new ::std::string;
  }
  gui_label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BitcoinAcct_InternalPB::mutable_gui_label() {
  set_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::kEmptyString) {
    gui_label_ = new ::std::string;
  }
  return gui_label_;
}
inline ::std::string* BitcoinAcct_InternalPB::release_gui_label() {
  clear_has_gui_label();
  if (gui_label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gui_label_;
    gui_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Wallet_InternalPB

// repeated .OTDB.BitcoinAcct_InternalPB bitcoin_acct = 1;
inline int Wallet_InternalPB::bitcoin_acct_size() const {
  return bitcoin_acct_.size();
}
inline void Wallet_InternalPB::clear_bitcoin_acct() {
  bitcoin_acct_.Clear();
}
inline const ::OTDB::BitcoinAcct_InternalPB& Wallet_InternalPB::bitcoin_acct(int index) const {
  return bitcoin_acct_.Get(index);
}
inline ::OTDB::BitcoinAcct_InternalPB* Wallet_InternalPB::mutable_bitcoin_acct(int index) {
  return bitcoin_acct_.Mutable(index);
}
inline ::OTDB::BitcoinAcct_InternalPB* Wallet_InternalPB::add_bitcoin_acct() {
  return bitcoin_acct_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::OTDB::BitcoinAcct_InternalPB >&
Wallet_InternalPB::bitcoin_acct() const {
  return bitcoin_acct_;
}
inline ::google::protobuf::RepeatedPtrField< ::OTDB::BitcoinAcct_InternalPB >*
Wallet_InternalPB::mutable_bitcoin_acct() {
  return &bitcoin_acct_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OTDB

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BitcoinAcct_2eproto__INCLUDED
