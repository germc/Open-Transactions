// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Bitcoin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace OTDB {

namespace {

const ::google::protobuf::Descriptor* BitcoinAcct_InternalPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitcoinAcct_InternalPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* BitcoinServer_InternalPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BitcoinServer_InternalPB_reflection_ = NULL;
const ::google::protobuf::Descriptor* WalletData_InternalPB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WalletData_InternalPB_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Bitcoin_2eproto() {
  protobuf_AddDesc_Bitcoin_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Bitcoin.proto");
  GOOGLE_CHECK(file != NULL);
  BitcoinAcct_InternalPB_descriptor_ = file->message_type(0);
  static const int BitcoinAcct_InternalPB_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinAcct_InternalPB, gui_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinAcct_InternalPB, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinAcct_InternalPB, acct_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinAcct_InternalPB, bitcoin_acct_name_),
  };
  BitcoinAcct_InternalPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BitcoinAcct_InternalPB_descriptor_,
      BitcoinAcct_InternalPB::default_instance_,
      BitcoinAcct_InternalPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinAcct_InternalPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinAcct_InternalPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BitcoinAcct_InternalPB));
  BitcoinServer_InternalPB_descriptor_ = file->message_type(1);
  static const int BitcoinServer_InternalPB_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinServer_InternalPB, gui_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinServer_InternalPB, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinServer_InternalPB, server_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinServer_InternalPB, server_host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinServer_InternalPB, server_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinServer_InternalPB, bitcoin_username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinServer_InternalPB, bitcoin_password_),
  };
  BitcoinServer_InternalPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BitcoinServer_InternalPB_descriptor_,
      BitcoinServer_InternalPB::default_instance_,
      BitcoinServer_InternalPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinServer_InternalPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BitcoinServer_InternalPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BitcoinServer_InternalPB));
  WalletData_InternalPB_descriptor_ = file->message_type(2);
  static const int WalletData_InternalPB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalletData_InternalPB, bitcoin_server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalletData_InternalPB, bitcoin_acct_),
  };
  WalletData_InternalPB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WalletData_InternalPB_descriptor_,
      WalletData_InternalPB::default_instance_,
      WalletData_InternalPB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalletData_InternalPB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalletData_InternalPB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WalletData_InternalPB));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Bitcoin_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BitcoinAcct_InternalPB_descriptor_, &BitcoinAcct_InternalPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BitcoinServer_InternalPB_descriptor_, &BitcoinServer_InternalPB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WalletData_InternalPB_descriptor_, &WalletData_InternalPB::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Bitcoin_2eproto() {
  delete BitcoinAcct_InternalPB::default_instance_;
  delete BitcoinAcct_InternalPB_reflection_;
  delete BitcoinServer_InternalPB::default_instance_;
  delete BitcoinServer_InternalPB_reflection_;
  delete WalletData_InternalPB::default_instance_;
  delete WalletData_InternalPB_reflection_;
}

void protobuf_AddDesc_Bitcoin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rBitcoin.proto\022\004OTDB\"j\n\026BitcoinAcct_Int"
    "ernalPB\022\021\n\tgui_label\030\001 \001(\t\022\021\n\tserver_id\030"
    "\002 \001(\t\022\017\n\007acct_id\030\003 \001(\t\022\031\n\021bitcoin_acct_n"
    "ame\030\004 \001(\t\"\263\001\n\030BitcoinServer_InternalPB\022\021"
    "\n\tgui_label\030\001 \001(\t\022\021\n\tserver_id\030\002 \001(\t\022\023\n\013"
    "server_type\030\003 \001(\t\022\023\n\013server_host\030\004 \001(\t\022\023"
    "\n\013server_port\030\005 \001(\t\022\030\n\020bitcoin_username\030"
    "\006 \001(\t\022\030\n\020bitcoin_password\030\007 \001(\t\"\203\001\n\025Wall"
    "etData_InternalPB\0226\n\016bitcoin_server\030\001 \003("
    "\0132\036.OTDB.BitcoinServer_InternalPB\0222\n\014bit"
    "coin_acct\030\002 \003(\0132\034.OTDB.BitcoinAcct_Inter"
    "nalPB", 445);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Bitcoin.proto", &protobuf_RegisterTypes);
  BitcoinAcct_InternalPB::default_instance_ = new BitcoinAcct_InternalPB();
  BitcoinServer_InternalPB::default_instance_ = new BitcoinServer_InternalPB();
  WalletData_InternalPB::default_instance_ = new WalletData_InternalPB();
  BitcoinAcct_InternalPB::default_instance_->InitAsDefaultInstance();
  BitcoinServer_InternalPB::default_instance_->InitAsDefaultInstance();
  WalletData_InternalPB::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Bitcoin_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Bitcoin_2eproto {
  StaticDescriptorInitializer_Bitcoin_2eproto() {
    protobuf_AddDesc_Bitcoin_2eproto();
  }
} static_descriptor_initializer_Bitcoin_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BitcoinAcct_InternalPB::kGuiLabelFieldNumber;
const int BitcoinAcct_InternalPB::kServerIdFieldNumber;
const int BitcoinAcct_InternalPB::kAcctIdFieldNumber;
const int BitcoinAcct_InternalPB::kBitcoinAcctNameFieldNumber;
#endif  // !_MSC_VER

BitcoinAcct_InternalPB::BitcoinAcct_InternalPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BitcoinAcct_InternalPB::InitAsDefaultInstance() {
}

BitcoinAcct_InternalPB::BitcoinAcct_InternalPB(const BitcoinAcct_InternalPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BitcoinAcct_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  gui_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  acct_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bitcoin_acct_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BitcoinAcct_InternalPB::~BitcoinAcct_InternalPB() {
  SharedDtor();
}

void BitcoinAcct_InternalPB::SharedDtor() {
  if (gui_label_ != &::google::protobuf::internal::kEmptyString) {
    delete gui_label_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (acct_id_ != &::google::protobuf::internal::kEmptyString) {
    delete acct_id_;
  }
  if (bitcoin_acct_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bitcoin_acct_name_;
  }
  if (this != default_instance_) {
  }
}

void BitcoinAcct_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitcoinAcct_InternalPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitcoinAcct_InternalPB_descriptor_;
}

const BitcoinAcct_InternalPB& BitcoinAcct_InternalPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Bitcoin_2eproto();  return *default_instance_;
}

BitcoinAcct_InternalPB* BitcoinAcct_InternalPB::default_instance_ = NULL;

BitcoinAcct_InternalPB* BitcoinAcct_InternalPB::New() const {
  return new BitcoinAcct_InternalPB;
}

void BitcoinAcct_InternalPB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gui_label()) {
      if (gui_label_ != &::google::protobuf::internal::kEmptyString) {
        gui_label_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
    if (has_acct_id()) {
      if (acct_id_ != &::google::protobuf::internal::kEmptyString) {
        acct_id_->clear();
      }
    }
    if (has_bitcoin_acct_name()) {
      if (bitcoin_acct_name_ != &::google::protobuf::internal::kEmptyString) {
        bitcoin_acct_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BitcoinAcct_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gui_label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gui_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gui_label().data(), this->gui_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }
      
      // optional string server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_acct_id;
        break;
      }
      
      // optional string acct_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acct_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acct_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acct_id().data(), this->acct_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bitcoin_acct_name;
        break;
      }
      
      // optional string bitcoin_acct_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bitcoin_acct_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bitcoin_acct_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bitcoin_acct_name().data(), this->bitcoin_acct_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BitcoinAcct_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gui_label = 1;
  if (has_gui_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gui_label().data(), this->gui_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gui_label(), output);
  }
  
  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_id(), output);
  }
  
  // optional string acct_id = 3;
  if (has_acct_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acct_id().data(), this->acct_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->acct_id(), output);
  }
  
  // optional string bitcoin_acct_name = 4;
  if (has_bitcoin_acct_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bitcoin_acct_name().data(), this->bitcoin_acct_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->bitcoin_acct_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BitcoinAcct_InternalPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gui_label = 1;
  if (has_gui_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gui_label().data(), this->gui_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gui_label(), target);
  }
  
  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }
  
  // optional string acct_id = 3;
  if (has_acct_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acct_id().data(), this->acct_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->acct_id(), target);
  }
  
  // optional string bitcoin_acct_name = 4;
  if (has_bitcoin_acct_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bitcoin_acct_name().data(), this->bitcoin_acct_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bitcoin_acct_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BitcoinAcct_InternalPB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gui_label = 1;
    if (has_gui_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gui_label());
    }
    
    // optional string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }
    
    // optional string acct_id = 3;
    if (has_acct_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acct_id());
    }
    
    // optional string bitcoin_acct_name = 4;
    if (has_bitcoin_acct_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bitcoin_acct_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitcoinAcct_InternalPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BitcoinAcct_InternalPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BitcoinAcct_InternalPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BitcoinAcct_InternalPB::MergeFrom(const BitcoinAcct_InternalPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gui_label()) {
      set_gui_label(from.gui_label());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_acct_id()) {
      set_acct_id(from.acct_id());
    }
    if (from.has_bitcoin_acct_name()) {
      set_bitcoin_acct_name(from.bitcoin_acct_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BitcoinAcct_InternalPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitcoinAcct_InternalPB::CopyFrom(const BitcoinAcct_InternalPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitcoinAcct_InternalPB::IsInitialized() const {
  
  return true;
}

void BitcoinAcct_InternalPB::Swap(BitcoinAcct_InternalPB* other) {
  if (other != this) {
    std::swap(gui_label_, other->gui_label_);
    std::swap(server_id_, other->server_id_);
    std::swap(acct_id_, other->acct_id_);
    std::swap(bitcoin_acct_name_, other->bitcoin_acct_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BitcoinAcct_InternalPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitcoinAcct_InternalPB_descriptor_;
  metadata.reflection = BitcoinAcct_InternalPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BitcoinServer_InternalPB::kGuiLabelFieldNumber;
const int BitcoinServer_InternalPB::kServerIdFieldNumber;
const int BitcoinServer_InternalPB::kServerTypeFieldNumber;
const int BitcoinServer_InternalPB::kServerHostFieldNumber;
const int BitcoinServer_InternalPB::kServerPortFieldNumber;
const int BitcoinServer_InternalPB::kBitcoinUsernameFieldNumber;
const int BitcoinServer_InternalPB::kBitcoinPasswordFieldNumber;
#endif  // !_MSC_VER

BitcoinServer_InternalPB::BitcoinServer_InternalPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BitcoinServer_InternalPB::InitAsDefaultInstance() {
}

BitcoinServer_InternalPB::BitcoinServer_InternalPB(const BitcoinServer_InternalPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BitcoinServer_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  gui_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  server_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bitcoin_username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bitcoin_password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BitcoinServer_InternalPB::~BitcoinServer_InternalPB() {
  SharedDtor();
}

void BitcoinServer_InternalPB::SharedDtor() {
  if (gui_label_ != &::google::protobuf::internal::kEmptyString) {
    delete gui_label_;
  }
  if (server_id_ != &::google::protobuf::internal::kEmptyString) {
    delete server_id_;
  }
  if (server_type_ != &::google::protobuf::internal::kEmptyString) {
    delete server_type_;
  }
  if (server_host_ != &::google::protobuf::internal::kEmptyString) {
    delete server_host_;
  }
  if (server_port_ != &::google::protobuf::internal::kEmptyString) {
    delete server_port_;
  }
  if (bitcoin_username_ != &::google::protobuf::internal::kEmptyString) {
    delete bitcoin_username_;
  }
  if (bitcoin_password_ != &::google::protobuf::internal::kEmptyString) {
    delete bitcoin_password_;
  }
  if (this != default_instance_) {
  }
}

void BitcoinServer_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BitcoinServer_InternalPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BitcoinServer_InternalPB_descriptor_;
}

const BitcoinServer_InternalPB& BitcoinServer_InternalPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Bitcoin_2eproto();  return *default_instance_;
}

BitcoinServer_InternalPB* BitcoinServer_InternalPB::default_instance_ = NULL;

BitcoinServer_InternalPB* BitcoinServer_InternalPB::New() const {
  return new BitcoinServer_InternalPB;
}

void BitcoinServer_InternalPB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gui_label()) {
      if (gui_label_ != &::google::protobuf::internal::kEmptyString) {
        gui_label_->clear();
      }
    }
    if (has_server_id()) {
      if (server_id_ != &::google::protobuf::internal::kEmptyString) {
        server_id_->clear();
      }
    }
    if (has_server_type()) {
      if (server_type_ != &::google::protobuf::internal::kEmptyString) {
        server_type_->clear();
      }
    }
    if (has_server_host()) {
      if (server_host_ != &::google::protobuf::internal::kEmptyString) {
        server_host_->clear();
      }
    }
    if (has_server_port()) {
      if (server_port_ != &::google::protobuf::internal::kEmptyString) {
        server_port_->clear();
      }
    }
    if (has_bitcoin_username()) {
      if (bitcoin_username_ != &::google::protobuf::internal::kEmptyString) {
        bitcoin_username_->clear();
      }
    }
    if (has_bitcoin_password()) {
      if (bitcoin_password_ != &::google::protobuf::internal::kEmptyString) {
        bitcoin_password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BitcoinServer_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string gui_label = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gui_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gui_label().data(), this->gui_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_id;
        break;
      }
      
      // optional string server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_id().data(), this->server_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_type;
        break;
      }
      
      // optional string server_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_type().data(), this->server_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_server_host;
        break;
      }
      
      // optional string server_host = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_host().data(), this->server_host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_server_port;
        break;
      }
      
      // optional string server_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_port().data(), this->server_port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bitcoin_username;
        break;
      }
      
      // optional string bitcoin_username = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bitcoin_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bitcoin_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bitcoin_username().data(), this->bitcoin_username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_bitcoin_password;
        break;
      }
      
      // optional string bitcoin_password = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bitcoin_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bitcoin_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bitcoin_password().data(), this->bitcoin_password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BitcoinServer_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string gui_label = 1;
  if (has_gui_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gui_label().data(), this->gui_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gui_label(), output);
  }
  
  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->server_id(), output);
  }
  
  // optional string server_type = 3;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_type().data(), this->server_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_type(), output);
  }
  
  // optional string server_host = 4;
  if (has_server_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_host().data(), this->server_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->server_host(), output);
  }
  
  // optional string server_port = 5;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_port().data(), this->server_port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->server_port(), output);
  }
  
  // optional string bitcoin_username = 6;
  if (has_bitcoin_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bitcoin_username().data(), this->bitcoin_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->bitcoin_username(), output);
  }
  
  // optional string bitcoin_password = 7;
  if (has_bitcoin_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bitcoin_password().data(), this->bitcoin_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->bitcoin_password(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BitcoinServer_InternalPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string gui_label = 1;
  if (has_gui_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gui_label().data(), this->gui_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gui_label(), target);
  }
  
  // optional string server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_id().data(), this->server_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->server_id(), target);
  }
  
  // optional string server_type = 3;
  if (has_server_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_type().data(), this->server_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_type(), target);
  }
  
  // optional string server_host = 4;
  if (has_server_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_host().data(), this->server_host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->server_host(), target);
  }
  
  // optional string server_port = 5;
  if (has_server_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_port().data(), this->server_port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->server_port(), target);
  }
  
  // optional string bitcoin_username = 6;
  if (has_bitcoin_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bitcoin_username().data(), this->bitcoin_username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bitcoin_username(), target);
  }
  
  // optional string bitcoin_password = 7;
  if (has_bitcoin_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bitcoin_password().data(), this->bitcoin_password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->bitcoin_password(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BitcoinServer_InternalPB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string gui_label = 1;
    if (has_gui_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gui_label());
    }
    
    // optional string server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_id());
    }
    
    // optional string server_type = 3;
    if (has_server_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_type());
    }
    
    // optional string server_host = 4;
    if (has_server_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_host());
    }
    
    // optional string server_port = 5;
    if (has_server_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_port());
    }
    
    // optional string bitcoin_username = 6;
    if (has_bitcoin_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bitcoin_username());
    }
    
    // optional string bitcoin_password = 7;
    if (has_bitcoin_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bitcoin_password());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BitcoinServer_InternalPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BitcoinServer_InternalPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BitcoinServer_InternalPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BitcoinServer_InternalPB::MergeFrom(const BitcoinServer_InternalPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gui_label()) {
      set_gui_label(from.gui_label());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_server_type()) {
      set_server_type(from.server_type());
    }
    if (from.has_server_host()) {
      set_server_host(from.server_host());
    }
    if (from.has_server_port()) {
      set_server_port(from.server_port());
    }
    if (from.has_bitcoin_username()) {
      set_bitcoin_username(from.bitcoin_username());
    }
    if (from.has_bitcoin_password()) {
      set_bitcoin_password(from.bitcoin_password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BitcoinServer_InternalPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BitcoinServer_InternalPB::CopyFrom(const BitcoinServer_InternalPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BitcoinServer_InternalPB::IsInitialized() const {
  
  return true;
}

void BitcoinServer_InternalPB::Swap(BitcoinServer_InternalPB* other) {
  if (other != this) {
    std::swap(gui_label_, other->gui_label_);
    std::swap(server_id_, other->server_id_);
    std::swap(server_type_, other->server_type_);
    std::swap(server_host_, other->server_host_);
    std::swap(server_port_, other->server_port_);
    std::swap(bitcoin_username_, other->bitcoin_username_);
    std::swap(bitcoin_password_, other->bitcoin_password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BitcoinServer_InternalPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BitcoinServer_InternalPB_descriptor_;
  metadata.reflection = BitcoinServer_InternalPB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WalletData_InternalPB::kBitcoinServerFieldNumber;
const int WalletData_InternalPB::kBitcoinAcctFieldNumber;
#endif  // !_MSC_VER

WalletData_InternalPB::WalletData_InternalPB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WalletData_InternalPB::InitAsDefaultInstance() {
}

WalletData_InternalPB::WalletData_InternalPB(const WalletData_InternalPB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WalletData_InternalPB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WalletData_InternalPB::~WalletData_InternalPB() {
  SharedDtor();
}

void WalletData_InternalPB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WalletData_InternalPB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WalletData_InternalPB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WalletData_InternalPB_descriptor_;
}

const WalletData_InternalPB& WalletData_InternalPB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Bitcoin_2eproto();  return *default_instance_;
}

WalletData_InternalPB* WalletData_InternalPB::default_instance_ = NULL;

WalletData_InternalPB* WalletData_InternalPB::New() const {
  return new WalletData_InternalPB;
}

void WalletData_InternalPB::Clear() {
  bitcoin_server_.Clear();
  bitcoin_acct_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WalletData_InternalPB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OTDB.BitcoinServer_InternalPB bitcoin_server = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bitcoin_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bitcoin_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bitcoin_server;
        if (input->ExpectTag(18)) goto parse_bitcoin_acct;
        break;
      }
      
      // repeated .OTDB.BitcoinAcct_InternalPB bitcoin_acct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bitcoin_acct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bitcoin_acct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bitcoin_acct;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WalletData_InternalPB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OTDB.BitcoinServer_InternalPB bitcoin_server = 1;
  for (int i = 0; i < this->bitcoin_server_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bitcoin_server(i), output);
  }
  
  // repeated .OTDB.BitcoinAcct_InternalPB bitcoin_acct = 2;
  for (int i = 0; i < this->bitcoin_acct_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bitcoin_acct(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WalletData_InternalPB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OTDB.BitcoinServer_InternalPB bitcoin_server = 1;
  for (int i = 0; i < this->bitcoin_server_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bitcoin_server(i), target);
  }
  
  // repeated .OTDB.BitcoinAcct_InternalPB bitcoin_acct = 2;
  for (int i = 0; i < this->bitcoin_acct_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bitcoin_acct(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WalletData_InternalPB::ByteSize() const {
  int total_size = 0;
  
  // repeated .OTDB.BitcoinServer_InternalPB bitcoin_server = 1;
  total_size += 1 * this->bitcoin_server_size();
  for (int i = 0; i < this->bitcoin_server_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bitcoin_server(i));
  }
  
  // repeated .OTDB.BitcoinAcct_InternalPB bitcoin_acct = 2;
  total_size += 1 * this->bitcoin_acct_size();
  for (int i = 0; i < this->bitcoin_acct_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bitcoin_acct(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WalletData_InternalPB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WalletData_InternalPB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WalletData_InternalPB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WalletData_InternalPB::MergeFrom(const WalletData_InternalPB& from) {
  GOOGLE_CHECK_NE(&from, this);
  bitcoin_server_.MergeFrom(from.bitcoin_server_);
  bitcoin_acct_.MergeFrom(from.bitcoin_acct_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WalletData_InternalPB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WalletData_InternalPB::CopyFrom(const WalletData_InternalPB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletData_InternalPB::IsInitialized() const {
  
  return true;
}

void WalletData_InternalPB::Swap(WalletData_InternalPB* other) {
  if (other != this) {
    bitcoin_server_.Swap(&other->bitcoin_server_);
    bitcoin_acct_.Swap(&other->bitcoin_acct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WalletData_InternalPB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WalletData_InternalPB_descriptor_;
  metadata.reflection = WalletData_InternalPB_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace OTDB

// @@protoc_insertion_point(global_scope)
